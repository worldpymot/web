{"version":3,"sources":["logo.svg","components/Header.js","components/Message.js","components/MessageList.js","components/MessageBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","href","this","props","title","Component","Message","message","MessageList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","messages","db","database","ref","on","snapshot","getData","val","values","messagesVal","_","keys","map","messageKey","cloned","clone","key","value","setState","messageNodes","components_Message","MessageBox","onChange","bind","assertThisInitialized","onKeyup","e","target","keyCode","trim","preventDefault","push","htmlFor","rows","placeholder","onKeyUp","App","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","style","backgroundColor","components_Header","components_MessageList","components_MessageBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.325fdf8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n    render(){\r\n        return (\r\n            <nav className=\"navbar\">\r\n                <div className=\"navbar-brand\">\r\n                    <a className=\"navbar-item\" href=\"http://bulma.io\">\r\n                        {this.props.title}\r\n                    </a>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\nexport default Header;","// Message.js\r\n\r\nimport React, {Component} from 'react';\r\n\r\nclass Message extends Component {\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                {this.props.message}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Message;","// MessageList.js\r\nimport React, {Component} from 'react';\r\n\r\nimport Message from './Message';\r\nimport _ from 'lodash';\r\n\r\nclass MessageList extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state  = {\r\n            messages: []\r\n        };\r\n        let app = this.props.db.database().ref('messages');\r\n        app.on('value', snapshot => {\r\n            this.getData(snapshot.val());\r\n        });\r\n    }\r\n\r\n    getData(values){\r\n        let messagesVal = values;\r\n        let messages = _(messagesVal)\r\n            .keys()\r\n            .map(messageKey => {\r\n                let cloned = _.clone(messagesVal[messageKey]);\r\n                cloned.key = messageKey;\r\n                return cloned;\r\n            })\r\n            .value();\r\n        this.setState({\r\n            messages: messages\r\n        });\r\n    }\r\n\r\n    render(){\r\n\r\n        let messageNodes = this.state.messages.map((message) => {\r\n            return (\r\n                <Message key={message.message} message = {message.message} />\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {messageNodes}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageList;","// MessageBox.js\r\n\r\nimport React, {Component} from 'react';\r\nimport trim from 'trim';\r\n\r\nclass MessageBox extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onKeyup = this.onKeyup.bind(this);\r\n        this.state = {\r\n            message: ''\r\n        };\r\n    }\r\n    onChange(e){\r\n        this.setState({\r\n            message: e.target.value\r\n        });\r\n    }\r\n    onKeyup(e){\r\n        if(e.keyCode === 13 && trim(e.target.value) !== ''){\r\n            e.preventDefault();\r\n            let dbCon = this.props.db.database().ref('/messages');\r\n            dbCon.push({\r\n                message: trim(e.target.value)\r\n            });\r\n            this.setState({\r\n                message: ''\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"comment\">Message:</label>\r\n                    <textarea\r\n                        className=\"form-control\"\r\n                        rows=\"5\"\r\n                        placeholder=\"Type a message\"\r\n                        onChange={this.onChange}\r\n                        onKeyUp={this.onKeyup}\r\n                        value={this.state.message}>\r\n                    </textarea>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageBox;","import React, { Component } from 'react';\n\nimport Header from './components/Header';\nimport MessageList from './components/MessageList';\nimport MessageBox from './components/MessageBox';\n\nimport firebase from 'firebase';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends Component {\n\n    constructor(props){\n        super(props);\n        const config = {\n            apiKey: process.env.REACT_APP_FIREBASE_KEY,\n            authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n            databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n            projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n            storageBucket: process.env.REACT_APP_FIREBASE_BUCKET,\n            messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID\n        };\n        firebase.initializeApp(config);\n    }\n\n  render() {\n      var lavender = {\n          backgroundColor: 'lavender'\n      };\n      var orange = {\n          backgroundColor: 'orange'\n      };\n      var yellow = {\n          backgroundColor: 'yellow'\n      };\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col\" style={lavender}>\n                    <Header title=\"Data App\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\" style={yellow}>\n                    <MessageList db={firebase} />\n                </div>\n                <div className=\"col\" style={orange}>\n                    <MessageBox db={firebase} />\n                </div>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}